# agents/ai_model_agent_enhanced.py
import numpy as np
import pandas as pd
from typing import Dict, Any, List, Optional
from .ai_model_agent import AIModelAgent
from ..synthetic_intelligence.si_core import si_core, SyntheticDataConfig, SyntheticDataType

class AIModelAgentEnhanced(AIModelAgent):
    def execute(self, task: Dict[str, Any]) -> Dict[str, Any]:
        task_type = task.get('task_type')
        
        if task_type == 'train_with_synthetic_data':
            return self.train_with_synthetic_data(task)
        elif task_type == 'validate_with_synthetic_data':
            return self.validate_with_synthetic_data(task)
        elif task_type == 'augment_with_synthetic_data':
            return self.augment_with_synthetic_data(task)
        else:
            # Fall back to parent implementation
            return super().execute(task)
    
    def train_with_synthetic_data(self, task: Dict[str, Any]) -> Dict[str, Any]:
        model_type = task.get('model_type', 'neural_network')
        synthetic_data_config = task.get('synthetic_data_config', {})
        training_config = task.get('training_config', {})
        
        # Generate synthetic training data
        config = SyntheticDataConfig(
            data_type=SyntheticDataType.TABULAR,
            size=synthetic_data_config.get('size', 1000),
            parameters=synthetic_data_config.get('parameters', {})
        )
        
        synthetic_data = si_core.generate_data(config)
        
        # Extract features and target
        X = synthetic_data.drop('target', axis=1)
        y = synthetic_data['target']
        
        # Train model
        model = self.create_model(model_type)
        trained_model = self.train_model(model, X, y, training_config)
        
        return self.create_result(
            status="success",
            result={
                "model": trained_model,
                "synthetic_data_shape": synthetic_data.shape,
                "model_type": model_type,
                "training_config": training_config
            }
        )
    
    def validate_with_synthetic_data(self, task: Dict[str, Any]) -> Dict[str, Any]:
        model = task.get('model')
        synthetic_data_config = task.get('synthetic_data_config', {})
        validation_config = task.get('validation_config', {})
        
        # Generate synthetic validation data
        config = SyntheticDataConfig(
            data_type=SyntheticDataType.TABULAR,
            size=synthetic_data_config.get('size', 500),
            parameters=synthetic_data_config.get('parameters', {})
        )
        
        synthetic_data = si_core.generate_data(config)
        
        # Extract features and target
        X = synthetic_data.drop('target', axis=1)
        y = synthetic_data['target']
        
        # Validate model
        validation_results = self.validate_model(model, X, y, validation_config)
        
        return self.create_result(
            status="success",
            result={
                "validation_results": validation_results,
                "synthetic_data_shape": synthetic_data.shape,
                "validation_config": validation_config
            }
        )
    
    def augment_with_synthetic_data(self, task: Dict[str, Any]) -> Dict[str, Any]:
        real_data = task.get('real_data')
        synthetic_data_config = task.get('synthetic_data_config', {})
        augmentation_ratio = task.get('augmentation_ratio', 0.5)
        
        if real_data is None:
            return self.create_result(
                status="error",
                error="No real data provided for augmentation"
            )
        
        # Generate synthetic data
        synthetic_size = int(len(real_data) * augmentation_ratio)
        config = SyntheticDataConfig(
            data_type=SyntheticDataType.TABULAR,
            size=synthetic_size,
            parameters=synthetic_data_config.get('parameters', {})
        )
        
        synthetic_data = si_core.generate_data(config)
        
        # Ensure same columns
        synthetic_data = synthetic_data[real_data.columns]
        
        # Combine real and synthetic data
        augmented_data = pd.concat([real_data, synthetic_data], ignore_index=True)
        
        return self.create_result(
            status="success",
            result={
                "augmented_data": augmented_data,
                "real_data_size": len(real_data),
                "synthetic_data_size": len(synthetic_data),
                "augmentation_ratio": augmentation_ratio
            }
        )
